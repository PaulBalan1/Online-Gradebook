@using WebApplication.Authentication
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using WebApplication.Pages

<AuthorizeView Policy="SecurityLevel3">
    <div class="sidebar">
        <SecretarySidebar/>
    </div>
</AuthorizeView>

<div class="main">
    <AuthorizeView>
        <div class="top-row px-4">
                <Authorized>
                  <a href="" @onclick="PerformLogout">
                    Log out
                    </a>
                </Authorized>
        </div>
    </AuthorizeView>

    <div class="content px-4">
        @Body
    </div>
</div>


@code{ 

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    
    public async Task PerformLogout()
    {
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthStat).User;
        if(!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/login");
        }
    }
}