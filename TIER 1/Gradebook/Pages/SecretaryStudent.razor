@page "/SecretaryStudent"
@using BlazorDateRangePicker
@using WebApplication.Authentication
@using WebApplication.Data
@using WebApplication.Models
@using WebApplication.NetworkPackages
@using System.Text.Json
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="css/overallTheme.css">
</head>

<div class="blue-border container">
    <br>
    <div class="row">
        <div class="col">
            <h3 class="center-horiz">Create Student</h3>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-4 center-horiz form-group">
            <label for="fname">First name:</label>
            <input type="text" class="form-control" id="fname" placeholder="Adam" @bind="@createStudentFirstName">
        </div>
        <div class="col-4 center-horiz form-group">
            <label for="lname">Last name:</label>
            <input type="text" class="form-control" id="lname" placeholder="Adam" @bind="@createStudentLastName">
        </div>
        <div class="col-4 center-horiz form-group">
            <label for="Address">Address:</label>
            <input type="text" class="form-control" id="Address" placeholder="Raedersgade 8, 1tv, Horsens 8700" @bind="@createStudentAddress">
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-4 center-horiz form-group">
            <label for="password">Password:</label>
            <input type="password" class="form-control" id="password" placeholder="********" @bind="@createStudentPassword">
        </div>
        <div class="col-4 center-horiz form-group">
            <label for="phoneno">Phone no.:</label>
            <input type="text" class="form-control" id="phoneno" placeholder="12 34 56 78" @bind="@createStudentPhoneNr">
        </div>
        <div class="col-4 center-horiz form-group">
            <label>Birthday:</label>
            <DateRangePicker SingleDatePicker="true" MinDate="DateTime.Now.AddYears(-50)" MaxDate="DateTime.Now.AddYears(-5)" Format="dd-MM-yyyy" @bind-StartDate="@createStudentBirthdayAsDate"/>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <button class="btn btn-default btn-success" @onclick="CreateStudent" disabled="@StudentCreateBool()">Create Student</button>
        </div>
    </div>
    <br>
</div>

<div class="container blue-border" style="margin-top: 3em">
    <br>
    <div class="row">
        <div class="col">
            <h3 class="center-horiz">Edit Student</h3>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <label for="selectStudent">Select Student:</label>
            <select class="form-control" id="selectStudent" @bind="@selectedStudentAsString">
                <option value="" selected disabled hidden>Choose student...</option>
                @foreach (Student student in students)
                {
                    string studentAsString = JsonSerializer.Serialize(student);
                    <option value="@studentAsString">@student.Id - @student.FirstName @student.LastName</option>
                }
            </select>
            <button class="btn btn-default btn-danger" @onclick="DeleteStudent" style="margin-left: 1em" disabled=@StudentIsSelected()>Delete Student</button>
        </div>
    </div>
    <br>

    <div class="row">
        <div class="col-4 center-horiz form-group">
            <label for="Address2">Address:</label>
            <input type="text" class="form-control" id="Address2" placeholder="Raedersgade 8, 1tv, Horsens 8700"  @bind="@editedStudentAddress">
        </div>
        <div class="col-4 center-horiz form-group">
            <label for="password2">Password:</label>
            <input type="password" class="form-control" id="password2" placeholder="********"  @bind="@editedStudentPassword">
        </div>
        <div class="col-4 center-horiz form-group">
            <label for="phoneno2">Phone no.:</label>
            <input type="text" class="form-control" id="phoneno2" placeholder="12 34 56 78"  @bind="@editedStudentPhoneNr">
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <button class="btn btn-default btn-primary" @onclick="EditStudent" disabled="@StudentEditBool()">Edit Student</button>
        </div>
    </div>
    <br>
</div>

<br>
<p class="center-horiz" style="color: red">@ErrorLabel</p>

@code {
    Secretary secretary = CustomAuthenticationStateProvider.CachedSecretary;
    ISecretaryService SecretaryService = new SecretaryService();
    List<Student> students = new List<Student>();
    string ErrorLabel;

    //Regarding creating a student
    string createStudentFirstName;
    string createStudentLastName;
    string createStudentAddress;
    string createStudentPassword;
    string createStudentPhoneNr;
    string createStudentBirthday;
    DateTimeOffset? createStudentBirthdayAsDate = new DateTimeOffset?();

    //Regarding editing a student
    Student selectedStudent;
    string selectedStudentAsString;
    string editedStudentAddress;
    string editedStudentPassword;
    string editedStudentPhoneNr;

    void ExtractStudents()
    {
        students = new List<Student>();
        foreach (Class _class in secretary.Classes)
        {
            if(_class.Students!=null)
                students.AddRange(_class.Students);
        }
    }

    bool StudentIsSelected()
    {
        Console.WriteLine(selectedStudentAsString);
        return (selectedStudentAsString == null);
    }
    
    bool StudentCreateBool()
    {
        return !(createStudentFirstName != null && createStudentLastName != null && createStudentAddress != null && createStudentPassword != null && createStudentPhoneNr != null && createStudentBirthdayAsDate != null);
    }
    
    bool StudentEditBool()
    {
        return !(editedStudentAddress != null && editedStudentPassword != null && editedStudentPhoneNr != null);
    }

    async Task CreateStudent()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to create this student?")) return;
        createStudentBirthday = createStudentBirthdayAsDate.ToString().Substring(0,10);
        NetworkPackage package = await SecretaryService.CreateStudent(createStudentFirstName, createStudentLastName, createStudentAddress, createStudentPassword, createStudentPhoneNr, createStudentBirthday);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ResetCreateFields();
            ExtractStudents();
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - CREATE STUDENT");
            ErrorLabel = "There was an error";
        }
    }

    async Task EditStudent()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to modify this student?")) return;
        selectedStudent = JsonSerializer.Deserialize<Student>(selectedStudentAsString);
        NetworkPackage package = await SecretaryService.EditStudent(selectedStudent.Id, editedStudentAddress, editedStudentPassword, editedStudentPhoneNr);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ResetEditFields();
            ExtractStudents();
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - EDIT STUDENT");
            ErrorLabel = "There was an error";
        }
    }

    async Task DeleteStudent()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this student?")) return;
        selectedStudent = JsonSerializer.Deserialize<Student>(selectedStudentAsString);
        NetworkPackage package = await SecretaryService.DeleteStudent(selectedStudent.Id);
        Console.WriteLine(selectedStudent.Id);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ExtractStudents();
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - DELETE STUDENT");
            ErrorLabel = "There was an error";
        }
    }
    
    void ResetCreateFields()
    {
        createStudentFirstName = "";
        createStudentLastName = "";
        createStudentAddress = "";
        createStudentPassword = "";
        createStudentPhoneNr = "";
        createStudentBirthdayAsDate = null;
    }
    
    void ResetEditFields()
    {
        editedStudentAddress = "";
        editedStudentPassword = "";
        editedStudentPhoneNr = "";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        secretary = CustomAuthenticationStateProvider.CachedSecretary;
        ExtractStudents();
    }

}