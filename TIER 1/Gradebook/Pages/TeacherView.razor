@page "/Teacher"
@using WebApplication.Models
@using WebApplication.Authentication
@using System.Text.Json
@using WebApplication.Data
@using WebApplication.NetworkPackages
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="css/gradeTable.css">
    <link rel="stylesheet" href="css/overallTheme.css">
</head>

<div>
    <div class="row">
        <div class="col-4 center-horiz">
            @if (studentSelected)
            {
                <h4 class="center-horiz header-title">
                    <b>New Grade</b>
                </h4>
                <form>
                    <div class="blue-border center-horiz">
                        <div class="form-group">
                            <label>Course</label>
                            <select class="form-control" id="courseSelector" @bind="@selectedCourseAsString">
                                <option value="" selected disabled hidden>Choose course...</option>
                                @foreach (string course in selectedStudentCourses)
                                {
                                    <option value=@course>@course</option>
                                }
                            </select>
                        </div>
                        <div class="form-group" style="float: left">
                            <label>Grade</label>
                            <select class="form-control" id="gradeSelector" @bind="@selectedGradeAsString">
                                <option value="" selected disabled hidden>Choose grade...</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                                <option value="5">5</option>
                                <option value="6">6</option>
                                <option value="7">7</option>
                                <option value="8">8</option>
                                <option value="9">9</option>
                                <option value="10">10</option>
                            </select>
                        </div>
                        <br>
                        <button class="btn btn-primary" @onclick="AssignGrade" disabled=@NewGradeButtonDisabled()>Assign Grade</button>
                    </div>
                </form>
            }
        </div>
        <div class="col-4 center-horiz">
            <div>
                <h2 class="blue-border center-horiz">Teacher - <b>@teacher.FirstName @teacher.LastName</b>, ID = @teacher.Id</h2>
            </div>
            <br>

            <div class="blue-border center-horiz">
                <select class="form-control" name="classes" @onchange="@ClassSelected" id="classes">
                    <option value="" selected disabled hidden>Choose class</option>
                    @foreach (Class _class in teacher.Classes)
                    {
                        string className = _class.Year + " - ";
                        className = className + _class.Letter.ToString();
                        string serializedClass = JsonSerializer.Serialize(_class);
                        <option value="@serializedClass">@className</option>
                    }
                </select>

                @if (selectedClass != null)
                {
                    <select class="form-control" name="students" id="students" @onchange=@ExtractCourses>
                        <option value="" selected disabled hidden>Choose student...</option>
                        @if (selectedClass.Students != null)
                        {
                            @foreach (Student student in selectedClass.Students)
                            {
                                string selectedStudentName = student.FirstName + " " + student.LastName;
                                string serializedStudent = JsonSerializer.Serialize(student);
                                <option value="@serializedStudent">@selectedStudentName</option>
                            }
                        }
                    </select>
                }
                <br>
                <p class="center-horiz" style="color: red">@ErrorLabel</p>
            </div>
        </div>
        <div class="col-2">
            <div class="center-horiz">
                @if (studentSelected)
                {
                    <br>
                    <h4 class="center-horiz header-title">
                        <b>New Absence</b>
                    </h4>
                    <form>
                        <div class="blue-border" style="width: fit-content">
                            <div class="form-group">
                                <label>Course</label>
                                <select class="form-control" id="courseSelector" @bind="@selectedNewAbsenceCourse">
                                    <option value="" selected disabled hidden>Choose course...</option>
                                    @foreach (String course in selectedStudentCourses)
                                    {
                                        DateTime localDate = DateTime.Now;
                                        int aux = 0;
                                        @foreach (Absence absence in selectedStudent.Absences)
                                        {
                                            if (absence.Course.Equals(course) && absence.Date.Equals(localDate.Month + "/" + localDate.Day + "/" + localDate.Year))
                                            {
                                                aux++;
                                            }
                                        }

                                        if (aux == 0)
                                        {
                                            <option value=@course>@course</option>
                                        }
                                    }
                                </select>
                            </div>
                            <button class="btn btn-primary" @onclick="AssignAbsence" disabled=@NewAbsenceButtonDisabled()>Add Absence</button>
                        </div>
                    </form>
                }
            </div>
        </div>
        <div class="col-2">
            <div class="center-horiz">
                @if (studentSelected)
                {
                    <br>
                    <h4 class="center-horiz header-title">
                        <b>Excuse Absence</b>
                    </h4>
                    <form>
                        <div class="blue-border" style="width: fit-content">
                            <div class="form-group">
                                <label>Course</label>
                                <select class="form-control" id="courseSelector" @bind="@selectedAbsenceCourse">
                                    <option value="" selected disabled hidden>Choose course...</option>
                                    @foreach (String course in selectedStudentCourses)
                                    {
                                        <option value=@course>@course</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>Date</label>
                                <select class="form-control" id="dateSelector" @bind="@selectedAbsenceDate">
                                    <option value="" selected disabled hidden>Choose date...</option>
                                    @foreach (Absence absence in selectedStudent.Absences)
                                    {
                                        if (absence.Course.Equals(selectedAbsenceCourse) && !absence.Motivated)
                                        {
                                            <option value=@absence.Date>@absence.Date</option>
                                        }
                                    }
                                </select>
                            </div>
                            <br>
                            <button class="btn btn-primary" @onclick="MotivateAbsence" disabled=@MotivateAbsenceButtonDisabled()>Excuse Absence</button>
                        </div>
                    </form>
                }
            </div>
        </div>
    </div>
</div>

<br>

@if (selectedStudent != null)
{
    if (studentSelected)
    {
        <div class="blue-border">
            <table>
                @foreach (String course in selectedStudentCourses)
                {
                    <tr>
                        <th class="course">@course</th>
                        <tr>
                            <td style="width: 7em">Grades</td>
                            <tr>
                                @foreach (Grade grade in selectedStudent.Grades)
                                {
                                    string gradeOpacity = "0." + (int) (grade.GradeValue * 0.9);
                                    if (grade.GradeValue == 10) gradeOpacity = "1";
                                    string gradeColor = "rgba(15, 180, 255, " + gradeOpacity + ")";
                                    if (grade.Course.Equals(course))
                                    {
                                        <td class="cell" style="background-color: @gradeColor">@grade.GradeValue</td>
                                    }
                                }
                            </tr>
                            <tr>
                                @foreach (Grade grade in selectedStudent.Grades)
                                {
                                    if (grade.Course.Equals(course))
                                    {
                                        <td class="cell">@grade.Date</td>
                                    }
                                }
                            </tr>
                        </tr>
                        <tr>
                            <td style="width: 7em">Absences</td>
                            <tr>
                                @foreach (Absence absence in selectedStudent.Absences)
                                {
                                    if (absence.Course.Equals(course))
                                    {
                                        if (absence.Motivated)
                                        {
                                            <td class="cell" style="background-color: #8aff78">Motivated</td>
                                        }
                                        else
                                        {
                                            <td class="cell" style="background-color: #ff606f">Unmotivated</td>
                                        }
                                    }
                                }
                            </tr>
                            <tr>
                                @foreach (Absence absence in selectedStudent.Absences)
                                {
                                    if (absence.Course.Equals(course))
                                    {
                                        <td class="cell">@absence.Date</td>
                                    }
                                }
                            </tr>
                        </tr>
                    </tr>
                }
            </table>
        </div>
        <br>
    }
    if (studentSelected)
    {
        <div class="blue-border center-horiz">
            <h4>Student's address: <b>@selectedStudent.Address</b></h4>
            <h4>Student's phone number: <b>@selectedStudent.PhoneNumber</b></h4>
        </div>
        <br>
    }
}


@code {
    Teacher teacher = CustomAuthenticationStateProvider.CachedTeacher;
    ITeacherService teacherService = new TeacherService();
    string ErrorLabel;
    
    //Regarding selected student
    string selectedClassAsString;
    string selectedStudentAsString;
    Class selectedClass = new Class();
    Student selectedStudent = new Student();
    bool studentSelected;
    List<string> selectedStudentCourses = new List<string>();
    //Regarding new grade
    string selectedCourseAsString;
    string selectedGradeAsString;
    //Regarding new absence
    string selectedNewAbsenceCourse;
    string selectedAbsenceCourse;
    string selectedAbsenceDate;

    void ClassSelected(ChangeEventArgs e)
    {
        selectedClassAsString = e.Value.ToString();
        selectedClass = JsonSerializer.Deserialize<Class>(selectedClassAsString);
    }

    bool NewGradeButtonDisabled()
    {
        return (selectedCourseAsString == null || selectedGradeAsString == null);
    }

    bool NewAbsenceButtonDisabled()
    {
        return (selectedNewAbsenceCourse == null);
    }
    
    bool MotivateAbsenceButtonDisabled()
    {
        return (selectedAbsenceCourse == null || selectedAbsenceDate == null);
    }

    async Task AssignGrade()
    {
        NetworkPackage package = await teacherService.AssignGrade(selectedStudent.Id, selectedCourseAsString, Int32.Parse(selectedGradeAsString), teacher.Id);
        Console.WriteLine(selectedStudent.Id + " " + selectedCourseAsString + " " + Int32.Parse(selectedGradeAsString));
        if (package != null)
        {
            TeacherDataPackage teacherDataPackage = (TeacherDataPackage) package;
            CustomAuthenticationStateProvider.CachedTeacher = teacherDataPackage.data;
            teacher = teacherDataPackage.data;
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - GRADE ASSIGNMENT");
        }
    }

    async Task AssignAbsence()
    {
        NetworkPackage package = await teacherService.AssignAbsence(selectedStudent.Id, selectedNewAbsenceCourse, teacher.Id);
        Console.WriteLine(selectedStudent.Id + " " + selectedNewAbsenceCourse);
        if (package != null)
        {
            TeacherDataPackage teacherDataPackage = (TeacherDataPackage) package;
            CustomAuthenticationStateProvider.CachedTeacher = teacherDataPackage.data;
            teacher = teacherDataPackage.data;
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - ABSENCE ASSIGNMENT");
        }
    }

    async Task MotivateAbsence()
    {
        Console.WriteLine(selectedStudent.Id + " " + selectedAbsenceCourse + " " + selectedAbsenceDate + " " + teacher.Id);
        NetworkPackage package = await teacherService.MotivateAbsence(selectedStudent.Id, selectedAbsenceCourse, selectedAbsenceDate, teacher.Id);
        if (package != null)
        {
            TeacherDataPackage teacherDataPackage = (TeacherDataPackage) package;
            CustomAuthenticationStateProvider.CachedTeacher = teacherDataPackage.data;
            teacher = teacherDataPackage.data;
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - ABSENCE MOTIVATION");
        }
    }

    private void ExtractCourses(ChangeEventArgs e)
    {
        studentSelected = true;
        selectedStudentAsString = e.Value.ToString();
        selectedStudent = JsonSerializer.Deserialize<Student>(selectedStudentAsString);
    //Console.WriteLine(selectedStudent.FirstName);

        for (int i = 0; i < selectedClass.Courses.Count; i++)
        {
            if (i == 0 && selectedStudentCourses != null)
                selectedStudentCourses = new List<string>();
            selectedStudentCourses.Add(selectedClass.Courses[i].Name);
        }
    }

}