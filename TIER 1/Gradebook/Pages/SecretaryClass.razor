@page "/SecretaryClass"
@using WebApplication.Models
@using WebApplication.NetworkPackages
@using WebApplication.Data
@using WebApplication.Authentication
@using System.Text.Json
@using System.Security.Principal
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="css/overallTheme.css">
</head>

<div class="blue-border container">
    <br>
    <div class="row">
        <div class="col">
            <h3 class="center-horiz">Create Class</h3>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-4 center-horiz form-group">
            <label for="classNumber">Class number:</label>
            <select class="form-control" id="classNumber" @bind="@classNumber">
                <option value="" selected disabled hidden>Choose number...</option>
                <option value="12">12</option>
                <option value="11">11</option>
                <option value="10">10</option>
                <option value="9">9</option>
                <option value="8">8</option>
                <option value="7">7</option>
                <option value="6">6</option>
                <option value="5">5</option>
                <option value="4">4</option>
                <option value="3">3</option>
                <option value="2">2</option>
                <option value="1">1</option>
            </select>
        </div>
        <div class="col-4 center-horiz form-group">
            <label for="classLetter">Class letter:</label>
            <select class="form-control" id="classLetter" @bind="@classLetter">
                <option value="" selected disabled hidden>Choose letter...</option>
                <option value="A">A</option>
                <option value="B">B</option>
                <option value="C">C</option>
                <option value="D">D</option>
                <option value="E">E</option>
                <option value="F">F</option>
            </select>
        </div>
        <div class="col-4 center-horiz form-group">
            <label for="classTeacher">Class teacher:</label>
            <select class="form-control" id="classTeacher" @bind="@classTeacherId">
                <option value="" selected disabled hidden>Choose teacher...</option>
                @foreach (Teacher teacher in secretary.Teachers)
                {
                    <option value="@teacher.Id">@teacher.Id - @teacher.FirstName @teacher.LastName</option>
                }
            </select>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <button class="btn btn-default btn-success" @onclick="CreateClass" disabled="@CreateClassButtonDisabled()">Create Class</button>
        </div>
    </div>
    <br>
</div>

<div class="container blue-border" style="margin-top: 3em">
    <br>
    <div class="row">
        <div class="col">
            <h3 class="center-horiz">Edit Class</h3>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <label for="selectClass">Select Class:</label>
            <select class="form-control" id="selectClass" @onchange="ConstructSelectedClass">
                <option value="" selected disabled hidden>Choose class...</option>
                @foreach (Class _class in secretary.Classes)
                {
                    string classAsString = JsonSerializer.Serialize(_class);
                    <option value="@classAsString">@_class.Year @_class.Letter</option>
                }
            </select>
            <button class="btn btn-default btn-danger" style="margin-left: 1em" @onclick="DeleteClass" disabled="@DeleteClassButtonDisabled()">Delete Class</button>
            <p style="margin-top: 1em">Class average: @selectedClassAverage</p>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-6 center-horiz">
            <div class="row">
                <div class="col form-group">
                    <label for="addStudent">Student:</label>
                    <select class="form-control" id="addStudent" @bind="@selectedAddStudentAsString">
                        <option value="" selected disabled hidden>Choose student...</option>
                        @foreach (Class cClass in secretary.Classes)
                        {
                            if (cClass.Year.Equals(0))
                            {
                                @foreach (Student student in cClass.Students)
                                {
                                    <option value="@student.Id">@student.Id - @student.FirstName @student.LastName</option>
                                }
                            }
                        }
                    </select>
                    <button class="btn btn-default btn-success" style="margin-left: 1em" @onclick="AddStudentToClass" disabled="@AddStudentButtonDisabled()">Add Student</button>
                </div>
            </div>
            <br>
            <div class="row form-group">
                <div class="col form-group">
                    <label for="removeStudent">Student:</label>
                    <select class="form-control" id="removeStudent" @bind="@selectedRemoveStudentAsString">
                        <option value="" selected disabled hidden>Choose student...</option>
                        @foreach (Student student in studentsFromSelectedClass)
                        {
                            <option value="@student.Id">@student.Id - @student.FirstName @student.LastName</option>
                        }
                    </select>
                    <button class="btn btn-default btn-danger" style="margin-left: 1em" @onclick="DeleteStudentFromClass" disabled="@RemoveStudentButtonDisabled()">Remove Student</button>
                </div>
            </div>
        </div>
        <div class="col-6 center-horiz form-group">
            <div class="row">
                <div class="col form-group">
                    <label for="addCourse">Course:</label>
                    <select class="form-control" id="addCourse" @bind="@selectedAddCourse">
                        <option value="" selected disabled hidden>Choose course...</option>
                        
                        <option value="Math">Math</option>
                        <option value="Romanian">Romanian</option>
                        <option value="English">English</option>
                        <option value="Chemistry">Chemistry</option>
                        <option value="Informatics">Informatics</option>
                        <option value="Geography">Geography</option>
                        <option value="French">French</option>
                        <option value="German">German</option>
                        <option value="Biology">Biology</option>
                        <option value="Physics">Physics</option>
                        <option value="Sport education">Sport education</option>
                                        
                    </select>
                    <button class="btn btn-default btn-success" style="margin-left: 1em"  @onclick="AddCourseToClass" disabled="@AddCourseButtonDisabled()">Add Course</button>
                </div>
            </div>
            <br>
            <div class="row form-group">
                <div class="col form-group">
                    <label for="removeCourse">Course:</label>
                    <select class="form-control" id="removeCourse" @bind="@selectedDeleteCourse">
                        <option value="" selected disabled hidden>Choose course...</option>
                        @foreach (Course course in coursesFromSelectedClass)
                        {
                            <option value="@course.Name">@course.Name</option>
                        }
                    </select>
                    <button class="btn btn-default btn-danger" style="margin-left: 1em"  @onclick="RemoveCourseFromClass" disabled="@RemoveCourseButtonDisabled()">Remove Course</button>
                </div>
            </div>
        </div>
    </div>
    <br>
</div>


@code {
    Secretary secretary = CustomAuthenticationStateProvider.CachedSecretary;
    ISecretaryService SecretaryService = new SecretaryService();
    string ErrorLabel;

    //Class creation
    string classNumber;
    string classLetter;
    string classTeacherId;

    Class selectedClass = new Class();
    string selectedClassAsString;
    Student selectedAddStudent = new Student();
    string selectedAddStudentAsString;
    Student selectedRemoveStudent = new Student();
    string selectedRemoveStudentAsString;
    List<Student> studentsFromSelectedClass = new List<Student>();
    List<Course> coursesFromSelectedClass = new List<Course>();
    string selectedAddCourse;
    string selectedDeleteCourse;
    string selectedClassAverage;

    bool CreateClassButtonDisabled()
    {
        return (classNumber == null || classLetter == null || classTeacherId == null);
    }
    
    bool DeleteClassButtonDisabled()
    {
        return (selectedClassAsString==null);
    }
    
    bool AddStudentButtonDisabled()
    {
        return (selectedAddStudentAsString == null);
    }
    
    bool RemoveStudentButtonDisabled()
    {
        return (selectedRemoveStudentAsString == null);
    }
    
    bool AddCourseButtonDisabled()
    {
        return (selectedAddCourse == null);
    }
    
    bool RemoveCourseButtonDisabled()
    {
        return (selectedDeleteCourse == null);
    }
    
    void ConstructSelectedClass(ChangeEventArgs e)
    {
        selectedClassAsString = e.Value.ToString();
        selectedClass = JsonSerializer.Deserialize<Class>(selectedClassAsString);
        
        if(selectedClass.Students!=null)
            studentsFromSelectedClass = selectedClass.Students;
        else studentsFromSelectedClass = new List<Student>();
        
        if(selectedClass.Courses!=null)
            coursesFromSelectedClass = selectedClass.Courses;
        else coursesFromSelectedClass= new List<Course>();
    }

    async Task CreateClass()
    {
        NetworkPackage package = await SecretaryService.CreateClass(classNumber, classLetter, classTeacherId);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - CREATE CLASS");
            ErrorLabel = "There was an error";
        }
    }
    
    async Task DeleteClass()
    {
        string letter = selectedClass.Letter.ToString();
        string year = selectedClass.Year.ToString();
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete class " + @year + @letter + "?")) return;
        NetworkPackage package = await SecretaryService.DeleteClass(letter,year);
        Console.WriteLine(selectedClass.Year.ToString() + " " + selectedClass.Letter.ToString());
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - DELETE CLASS");
            ErrorLabel = "There was an error";
        }
    }
    
    async Task AddStudentToClass()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to add this student?")) return;
        NetworkPackage package = await SecretaryService.AddStudentToClass(selectedClass.Letter.ToString(), selectedClass.Year.ToString(), selectedAddStudentAsString);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - ADD STUDENT");
            ErrorLabel = "There was an error";
        }
    }

    async Task DeleteStudentFromClass()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this student?")) return;
        NetworkPackage package = await SecretaryService.RemoveStudentFromClass(selectedClass.Letter.ToString(), selectedClass.Year.ToString(), selectedRemoveStudentAsString);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - DELETE STUDENT");
            ErrorLabel = "There was an error";
        }
    }
    
    async Task AddCourseToClass()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to add this course?")) return;
        NetworkPackage package = await SecretaryService.AddCourseToClass(selectedClass.Letter.ToString(), selectedClass.Year.ToString(), selectedAddCourse);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - ADD COURSE");
            ErrorLabel = "There was an error";
        }
    }
    
    async Task RemoveCourseFromClass()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this course?")) return;
        NetworkPackage package = await SecretaryService.RemoveCourseFromClass(selectedClass.Letter.ToString(), selectedClass.Year.ToString(), selectedDeleteCourse);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - DELETE COURSE");
            ErrorLabel = "There was an error";
        }
    }
}