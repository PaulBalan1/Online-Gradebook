@page "/SecretaryLogin"
@using WebApplication.Models
@using WebApplication.Authentication
@using WebApplication.Data
@using WebApplication.NetworkPackages
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="css/overallTheme.css">
</head>


<div class="blue-border container">
    <br>
        <div class="row">
            <div class="col">
                <h3 class="center-horiz">Change log-in</h3>
            </div>
        </div>
    <br>
    <div class="row">
        <div class="col-3 center-horiz">
            <label for="user">Username:</label>
            <input type="text" class="form-control" id="user" placeholder="1234" @bind="@changedUsername">
            <button class="btn btn-default btn-success" style="margin: 1em" @onclick="ChangeUsername" disabled="@ChangeUsernameButtonDisabled()">Change Username</button>
        </div>
        <div class="col-3 center-horiz">
            <label for="pass">Password:</label>
            <input type="password" class="form-control" id="pass" placeholder="********" @bind="@changedPassword">
            <button class="btn btn-default btn-success" style="margin: 1em" @onclick="ChangePassword" disabled="@ChangePasswordButtonDisabled()">Change Password</button>
        </div>
    </div>
    <p class="center-horiz" style="color: red">@ErrorLabel</p>
</div>

@code {
    Secretary secretary = CustomAuthenticationStateProvider.CachedSecretary;
    ISecretaryService SecretaryService = new SecretaryService();
    string ErrorLabel;
    string changedUsername;
    string changedPassword;

    bool ChangeUsernameButtonDisabled()
    {
        return (changedUsername == null);
    }
    
    bool ChangePasswordButtonDisabled()
    {
        return (changedPassword == null);
    }
    
    async Task ChangeUsername()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to change your username?")) return;
        NetworkPackage package = await SecretaryService.ChangeSecretaryUsername(changedUsername);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ResetFields();
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - CHANGE USERNAME");
            ErrorLabel = "There was an error";
        }
    }
    
    async Task ChangePassword()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to change your password?")) return;
        NetworkPackage package = await SecretaryService.ChangeSecretaryPassword(changedPassword);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
            ResetFields();
            ErrorLabel = "";
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - CHANGE PASSWORD");
            ErrorLabel = "There was an error";
        }
    }

    void ResetFields()
    {
        changedPassword = "";
        changedUsername = "";
    }
}